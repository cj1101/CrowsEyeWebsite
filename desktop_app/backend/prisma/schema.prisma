// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  displayName String
  firstName   String?
  lastName    String?
  avatar      String?
  plan        Plan      @default(FREE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  mediaItems    MediaItem[]
  galleries     Gallery[]
  stories       Story[]
  highlights    HighlightReel[]
  posts         Post[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model MediaItem {
  id        String    @id @default(cuid())
  name      String
  type      MediaType
  url       String
  thumbnail String?
  size      Int
  tags      String[]
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  galleryItems   GalleryMedia[]
  storyMedia     StoryMedia[]
  highlightMedia HighlightMedia[]
  postMedia      PostMedia[]

  @@map("media_items")
}

model Gallery {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  images GalleryMedia[]

  @@map("galleries")
}

model GalleryMedia {
  id        String @id @default(cuid())
  galleryId String
  mediaId   String
  order     Int    @default(0)

  gallery Gallery   @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  media   MediaItem @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([galleryId, mediaId])
  @@map("gallery_media")
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  media StoryMedia[]

  @@map("stories")
}

model StoryMedia {
  id      String @id @default(cuid())
  storyId String
  mediaId String
  order   Int    @default(0)

  story Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  media MediaItem @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([storyId, mediaId])
  @@map("story_media")
}

model HighlightReel {
  id        String   @id @default(cuid())
  title     String
  duration  Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  clips HighlightMedia[]

  @@map("highlight_reels")
}

model HighlightMedia {
  id              String @id @default(cuid())
  highlightReelId String
  mediaId         String
  order           Int    @default(0)

  highlightReel HighlightReel @relation(fields: [highlightReelId], references: [id], onDelete: Cascade)
  media         MediaItem     @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([highlightReelId, mediaId])
  @@map("highlight_media")
}

model Post {
  id           String    @id @default(cuid())
  content      String
  platforms    String[]
  hashtags     String[]
  scheduledFor DateTime?
  published    Boolean   @default(false)
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  media     PostMedia[]
  analytics PostAnalytics[]

  @@map("posts")
}

model PostMedia {
  id      String @id @default(cuid())
  postId  String
  mediaId String
  order   Int    @default(0)

  post  Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  media MediaItem @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
  @@map("post_media")
}

model PostAnalytics {
  id         String   @id @default(cuid())
  postId     String
  platform   String
  views      Int      @default(0)
  likes      Int      @default(0)
  comments   Int      @default(0)
  shares     Int      @default(0)
  engagement Float    @default(0)
  recordedAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, platform])
  @@map("post_analytics")
}

model Activity {
  id        String       @id @default(cuid())
  userId    String
  action    String
  type      ActivityType @default(INFO)
  metadata  Json?
  createdAt DateTime     @default(now())

  @@map("activities")
}

enum Plan {
  FREE
  CREATOR
  PRO
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum ActivityType {
  SUCCESS
  INFO
  WARNING
  ERROR
}
