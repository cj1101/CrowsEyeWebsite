name: Build Cross-Platform Installers

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        pip install auto-py-to-exe
    
    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name "CrowsEye" --icon=assets/icon.ico main.py
        
    - name: Create Windows installer with NSIS
      run: |
        # Install NSIS
        choco install nsis -y
        
        # Create NSIS script
        echo '; Crow''s Eye Marketing Suite Installer' > installer.nsi
        echo '!define APPNAME "Crow''s Eye Marketing Suite"' >> installer.nsi
        echo '!define COMPANYNAME "Crow''s Eye"' >> installer.nsi
        echo '!define DESCRIPTION "AI-Powered Social Media Marketing Suite"' >> installer.nsi
        echo '!define VERSIONMAJOR 1' >> installer.nsi
        echo '!define VERSIONMINOR 0' >> installer.nsi
        echo '!define VERSIONBUILD 0' >> installer.nsi
        echo '!define HELPURL "https://crowseye.tech"' >> installer.nsi
        echo '!define UPDATEURL "https://crowseye.tech"' >> installer.nsi
        echo '!define ABOUTURL "https://crowseye.tech"' >> installer.nsi
        echo '!define INSTALLSIZE 50000' >> installer.nsi
        echo '' >> installer.nsi
        echo 'RequestExecutionLevel admin' >> installer.nsi
        echo 'InstallDir "$PROGRAMFILES\${APPNAME}"' >> installer.nsi
        echo 'Name "${APPNAME}"' >> installer.nsi
        echo 'Icon "assets\icon.ico"' >> installer.nsi
        echo 'outFile "CrowsEye-Setup-Windows.exe"' >> installer.nsi
        echo '' >> installer.nsi
        echo '!include LogicLib.nsh' >> installer.nsi
        echo '' >> installer.nsi
        echo 'page directory' >> installer.nsi
        echo 'page instfiles' >> installer.nsi
        echo '' >> installer.nsi
        echo 'section "install"' >> installer.nsi
        echo '    setOutPath $INSTDIR' >> installer.nsi
        echo '    file "dist\CrowsEye.exe"' >> installer.nsi
        echo '    file /r "assets"' >> installer.nsi
        echo '    writeUninstaller "$INSTDIR\uninstall.exe"' >> installer.nsi
        echo '    createDirectory "$SMPROGRAMS\${APPNAME}"' >> installer.nsi
        echo '    createShortCut "$SMPROGRAMS\${APPNAME}\${APPNAME}.lnk" "$INSTDIR\CrowsEye.exe" "" "$INSTDIR\assets\icon.ico"' >> installer.nsi
        echo '    createShortCut "$DESKTOP\${APPNAME}.lnk" "$INSTDIR\CrowsEye.exe" "" "$INSTDIR\assets\icon.ico"' >> installer.nsi
        echo 'sectionEnd' >> installer.nsi
        echo '' >> installer.nsi
        echo 'section "uninstall"' >> installer.nsi
        echo '    delete "$INSTDIR\CrowsEye.exe"' >> installer.nsi
        echo '    delete "$INSTDIR\uninstall.exe"' >> installer.nsi
        echo '    rmDir /r "$INSTDIR\assets"' >> installer.nsi
        echo '    rmDir "$INSTDIR"' >> installer.nsi
        echo '    delete "$SMPROGRAMS\${APPNAME}\${APPNAME}.lnk"' >> installer.nsi
        echo '    delete "$DESKTOP\${APPNAME}.lnk"' >> installer.nsi
        echo '    rmDir "$SMPROGRAMS\${APPNAME}"' >> installer.nsi
        echo 'sectionEnd' >> installer.nsi
        
        # Build installer
        makensis installer.nsi
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v3
      with:
        name: windows-installer
        path: CrowsEye-Setup-Windows.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        pip install dmgbuild
    
    - name: Build macOS app bundle
      run: |
        pyinstaller --onefile --windowed --name "CrowsEye" --icon=assets/icon.icns main.py
        
        # Create app bundle structure
        mkdir -p "Crow's Eye.app/Contents/MacOS"
        mkdir -p "Crow's Eye.app/Contents/Resources"
        
        # Copy executable
        cp dist/CrowsEye "Crow's Eye.app/Contents/MacOS/"
        
        # Copy icon
        cp assets/icon.icns "Crow's Eye.app/Contents/Resources/"
        
        # Create Info.plist
        cat > "Crow's Eye.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>CrowsEye</string>
            <key>CFBundleIdentifier</key>
            <string>tech.crowseye.marketing-suite</string>
            <key>CFBundleName</key>
            <string>Crow's Eye Marketing Suite</string>
            <key>CFBundleVersion</key>
            <string>1.0.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleIconFile</key>
            <string>icon.icns</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
    
    - name: Create DMG
      run: |
        # Create dmgbuild settings
        cat > dmg_settings.py << EOF
        import os
        
        application = "Crow's Eye.app"
        appname = "Crow's Eye Marketing Suite"
        
        format = 'UDBZ'
        size = '100M'
        
        files = [application]
        
        symlinks = {'Applications': '/Applications'}
        
        icon_locations = {
            application: (100, 100),
            'Applications': (400, 100)
        }
        
        background = None
        
        window_rect = ((100, 100), (500, 300))
        
        default_view = 'icon-view'
        show_status_bar = False
        show_tab_view = False
        show_toolbar = False
        show_pathbar = False
        show_sidebar = False
        sidebar_width = 180
        
        arrange_by = None
        grid_offset = (0, 0)
        grid_spacing = 100
        scroll_position = (0, 0)
        label_pos = 'bottom'
        text_size = 16
        icon_size = 128
        EOF
        
        # Build DMG
        dmgbuild -s dmg_settings.py "Crow's Eye Marketing Suite" CrowsEye-Setup-macOS.dmg
    
    - name: Upload macOS installer
      uses: actions/upload-artifact@v3
      with:
        name: macos-installer
        path: CrowsEye-Setup-macOS.dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libegl1-mesa \
          libxrandr2 \
          libxss1 \
          libxcursor1 \
          libxcomposite1 \
          libasound2 \
          libxi6 \
          libxtst6 \
          libqt6-dev \
          qt6-base-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux executable
      run: |
        pyinstaller --onefile --windowed --name "CrowsEye" main.py
    
    - name: Create AppImage
      run: |
        # Download AppImage tools
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Create AppDir structure
        mkdir -p CrowsEye.AppDir/usr/bin
        mkdir -p CrowsEye.AppDir/usr/share/applications
        mkdir -p CrowsEye.AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy executable
        cp dist/CrowsEye CrowsEye.AppDir/usr/bin/
        
        # Copy icon (convert if needed)
        if [ -f "assets/icon.png" ]; then
          cp assets/icon.png CrowsEye.AppDir/usr/share/icons/hicolor/256x256/apps/crowseye.png
        else
          # Create a simple icon if none exists
          convert -size 256x256 xc:blue CrowsEye.AppDir/usr/share/icons/hicolor/256x256/apps/crowseye.png
        fi
        
        # Create desktop file
        cat > CrowsEye.AppDir/usr/share/applications/crowseye.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Crow's Eye Marketing Suite
        Comment=AI-Powered Social Media Marketing Suite
        Exec=CrowsEye
        Icon=crowseye
        Categories=Office;Marketing;
        Terminal=false
        EOF
        
        # Create AppRun
        cat > CrowsEye.AppDir/AppRun << EOF
        #!/bin/bash
        HERE="\$(dirname "\$(readlink -f "\${0}")")"
        export PATH="\${HERE}/usr/bin:\${PATH}"
        export LD_LIBRARY_PATH="\${HERE}/usr/lib:\${LD_LIBRARY_PATH}"
        exec "\${HERE}/usr/bin/CrowsEye" "\$@"
        EOF
        chmod +x CrowsEye.AppDir/AppRun
        
        # Copy desktop file to root
        cp CrowsEye.AppDir/usr/share/applications/crowseye.desktop CrowsEye.AppDir/
        
        # Copy icon to root
        cp CrowsEye.AppDir/usr/share/icons/hicolor/256x256/apps/crowseye.png CrowsEye.AppDir/
        
        # Build AppImage
        ./appimagetool-x86_64.AppImage CrowsEye.AppDir CrowsEye-Setup-Linux.AppImage
    
    - name: Upload Linux installer
      uses: actions/upload-artifact@v3
      with:
        name: linux-installer
        path: CrowsEye-Setup-Linux.AppImage

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-installer/CrowsEye-Setup-Windows.exe
          macos-installer/CrowsEye-Setup-macOS.dmg
          linux-installer/CrowsEye-Setup-Linux.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 