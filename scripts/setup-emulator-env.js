#!/usr/bin/env node

/**
 * Setup Firebase Emulator Environment
 * This script creates the necessary .env.local file for offline development
 */

const fs = require('fs');
const path = require('path');

const EMULATOR_ENV_CONTENT = `# Firebase Emulator Configuration (Offline Development)
# Generated by setup-emulator-env.js

NEXT_PUBLIC_FIREBASE_API_KEY=demo-api-key
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=demo-project.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=demo-project
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=b/crows-eye-website.firebasestorage.app
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=123456789
NEXT_PUBLIC_FIREBASE_APP_ID=1:123456789:web:demo-app-id

# Enable Firebase Emulators for offline development
NEXT_PUBLIC_USE_FIREBASE_EMULATOR=true
NODE_ENV=development

# AI Services (add your actual keys if you have them)
GEMINI_API_KEY=your-gemini-api-key
NEXT_PUBLIC_GEMINI_API_KEY=your-gemini-api-key-here

# Backend API (optional - for AI services)
NEXT_PUBLIC_CROWS_EYE_API_URL=http://localhost:8001
`;

const PROJECT_ROOT = path.join(__dirname, '..');
const ENV_FILE = path.join(PROJECT_ROOT, '.env.local');
const BACKUP_FILE = path.join(PROJECT_ROOT, '.env.local.backup');

function setupEmulatorEnv() {
  console.log('üîß Setting up Firebase Emulator environment...');
  
  // Backup existing .env.local if it exists
  if (fs.existsSync(ENV_FILE)) {
    console.log('üì¶ Backing up existing .env.local');
    fs.copyFileSync(ENV_FILE, BACKUP_FILE);
  }
  
  // Write emulator environment
  fs.writeFileSync(ENV_FILE, EMULATOR_ENV_CONTENT);
  console.log('‚úÖ Created .env.local for emulator development');
  console.log('üìù Original file backed up as .env.local.backup');
  
  console.log('\nüöÄ Next steps:');
  console.log('1. Run: npm run emulator:start');
  console.log('2. Run: npm run dev (in another terminal)');
  console.log('3. Open: http://localhost:3000');
  console.log('4. Emulator UI: http://localhost:4000');
}

function restoreOriginalEnv() {
  console.log('üîÑ Restoring original environment...');
  
  if (fs.existsSync(BACKUP_FILE)) {
    fs.copyFileSync(BACKUP_FILE, ENV_FILE);
    fs.unlinkSync(BACKUP_FILE);
    console.log('‚úÖ Restored original .env.local');
  } else {
    if (fs.existsSync(ENV_FILE)) {
      fs.unlinkSync(ENV_FILE);
    }
    console.log('‚úÖ Removed emulator .env.local');
  }
}

// Command line interface
const command = process.argv[2];

if (command === 'restore') {
  restoreOriginalEnv();
} else {
  setupEmulatorEnv();
}

module.exports = { setupEmulatorEnv, restoreOriginalEnv }; 